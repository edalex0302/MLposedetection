import cv2
import mediapipe as mp
import joblib
import numpy as np

# Load the saved Random Forest model
classifier = joblib.load('MEDIAPIPE/random_forest_pose_model.joblib')
print("Model loaded successfully.")

# Initialize MediaPipe Pose
mp_pose = mp.solutions.pose
mp_drawing = mp.solutions.drawing_utils

# Setup webcam feed
cap = cv2.VideoCapture(0)

# Process live video feed
with mp_pose.Pose(static_image_mode=False) as pose:
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        # Convert the frame to RGB
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        # Detect pose landmarks
        results = pose.process(rgb_frame)

        # Check if landmarks are detected
        if results.pose_landmarks:
            # Draw pose landmarks on the frame
            mp_drawing.draw_landmarks(frame, results.pose_landmarks, mp_pose.POSE_CONNECTIONS)

            # Extract landmark coordinates
            landmarks = results.pose_landmarks.landmark
            keypoints = [(lm.x, lm.y) for lm in landmarks]

            # Format keypoints into the required input shape
            pose_data = [keypoint for pair in keypoints for keypoint in pair]

            # Predict pose using the classifier
            try:
                prediction = classifier.predict([pose_data])
                predicted_pose = prediction[0]  # Get the predicted class

                # Display prediction on the frame
                cv2.putText(frame, f"Pose: {predicted_pose}", (10, 50), 
                            cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
            except Exception as e:
                # Handle issues with input size or format
                print(f"Error during prediction: {e}")
                cv2.putText(frame, "Pose: Error", (10, 50), 
                            cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)

        # Show the frame with prediction
        cv2.imshow('Pose Detection', frame)

        # Break on 'q' key
        if cv2.waitKey(5) & 0xFF == ord('q'):
            break

# Release resources
cap.release()
cv2.destroyAllWindows()
